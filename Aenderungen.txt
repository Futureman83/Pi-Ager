tempon       -> circulation_air_duration       #  Umluftdauer
tempoff      -> $circulation_air_period         #  Umluftperiode
tempstart    -> circulation_air_start          #  Unix-Zeitstempel für den Zählstart des Timers Umluft
tempon1      -> exhaust_air_duration           #  (Abluft-)luftaustauschdauer
tempoff1     -> exhaust_air_period             #  (Abluft-)luftaustauschperiode
tempstart1   -> exhaust_air_start              #  Unix-Zeitstempel für den Zählstart des Timers (Abluft-)Luftaustausch
sensortemp   -> sensor_temperature             #  Gemessene Temperatur am Sensor
sensorhum    -> sensor_humidity                #  Gemessene Feuchtigkeit am Sensor
temphyston   -> switch_on_cooling_compressor   #  Einschalttemperatur
temphystoff  -> switch_off_cooling_compressor  #  Ausschalttemperatur
humhyston    -> switch_on_humidifier           #  Einschaltfeuchte
humhystoff   -> switch_off_humidifier          #  Ausschaltfeuchte
settings
uml          -> status_circulating_air         #  Umluft
lat          -> status_exhaust_air             #  (Abluft-)Luftaustausch
heat         -> status_heater                  #  Heizung
cool         -> status_cooling_compressor      #  Kühlung
z
lbf          -> status_humidifier              #  Luftbefeuchtung
count        -> counter_humidify               #  Zähler Verzögerung der Luftbefeuchtung
humdelay     -> delay_humidify                 #  Luftbefeuchtungsverzögerung
evac         -> status_exhaust_fan             #  Variable für die "Evakuierung" zur Feuchtereduzierung durch (Abluft-)Luftaustausch


current.json = json.dumps({"temperature":sensor_temperature, "heizung":gpio.input(pin_heater), "luftaustausch":gpio.input(pin_exhaust_fan), "kuhlung":gpio.input(pin_cooling_compressor), "umluft":gpio.input(pin_recirculation_fan),"luftfeuchtigkeit":sensor_humidity, 'date':int(time.time())})
               json.dumps({"sensor_temperature":sensor_temperature, "status_heater":gpio.input(pin_heater), "status_exhaust_air":gpio.input(pin_exhaust_fan), "status_cooling_compressor":gpio.input(pin_cooling_compressor), "status_circulating_air":gpio.input(pin_recirculation_fan),"sensor_humidity":sensor_humidity, 'last-change':int(time.time())})
    temperature         ->  sensor_temperature
    heizung             ->  status_heater
    luftaustausch       ->  status_exhaust_air
    kuhlung             ->  status_cooling_compressor
    umluft              ->  status_circulating_air
    luftfeuchtigkeit    ->  sensor_humidity
    date                ->  last_change
    
settings.json = json.dumps({"mod":mod, "temp":temp, "hum":hum, "tempoff":tempoff, "tempon":tempon, "tempoff1":tempoff1, "tempon1":tempon1, "temphyston":temphyston, "temphystoff":temphystoff, "humhyston":humhyston, "humhystoff":humhystoff, "humdelay":humdelay, 'date':int(time.time()), 'sensortype':sensortype})
               json.dumps({"modus":modus, "setpoint_temperature":setpoint_temperature, "setpoint_humidity":setpoint_humidity, "circulation_air_period":circulation_air_period, "circulation_air_duration":circulation_air_duration, "exhaust_air_period":exhaust_air_period, "exhaust_air_duration":exhaust_air_duration,'last_change':int(time.time())})
    mod         -> modus
    temp        -> setpoint_temperature
    hum         -> setpoint_humidity
    tempoff     -> $circulation_air_period
    tempon      -> circulation_air_duration
    tempoff1    -> exhaust_air_period
    tempon1     -> exhaust_air_duration
    day         -> last_change

 tables.json
     Reifetab -> agingtable

config.json
    sensortype, (1,2)                                       # DHT/SHT
    language, (de, en)                                      #Sprache der Ausgaben
    temphyston          -> switch_on_cooling_compressor     #  Einschalttemperatur
    temphystoff         -> switch_off_cooling_compressor    #  Ausschalttemperatur
    humhyston           -> switch_on_humidifier             #  Einschaltfeuchte
    humhystoff          -> switch_off_humidifier            #  Ausschaltfeuchte
    humdelay            -> delay_humidify                   #  Luftbefeuchtungsverzögerung
                        -> control_type                     # Schaltungssteuerung: Relais, Wlan, Funk
    date                -> last_change                      # Datum letzte änderung
    
csv Header
    mod,hum,humdelay,humhyston,humhystoff,temp,temphyston,temphystoff,tempon,tempoff,tempon1,tempoff1,days
    modus,setpoint_humidity,delay_humidify,switch_on_humidifier,switch_off_humidifier,setpoint_temperature,switch_on_cooling_compressor,switch_off_cooling_compressor,circulation_air_duration,circulation_air_period,exhaust_air_duration,exhaust_air_period,days

betriebsart -> operating_mode


Aus csv ausgelagert in config.json:
humhyston, humhystoff, temphyston, temphystoff, humdelay
switch_on_humidifier, switch_off_humidifier, switch_on_cooling_compressor, switch_off_cooling_compressor, delay_humidify

----------------------------------------------
Iconbibliothek:
https://icons8.com/icon/set/cloud/all

----------------------------------------------

Installation:
cd /tmp
wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-1.5.tar.gz
tar xfvz jq-1.5.tar.gz
cd jq-1.5
./configure && make && sudo make install


TODO
---
Install Python 3
http://wyre-it.co.uk/blog/latestpython/ oder:
sudo apt-get install python3
https://liudr.wordpress.com/2016/02/04/install-python-on-raspberry-pi-or-debian/

pip für python3
sudo apt-get install python3-pip
ja

sudo apt-get install librrd-dev libpython3-dev
ja

rrd-tool
sudo pip3 install rrdtool

simple json python3
sudo pip3 install simplejson

sht python3
sudo pip3 install pi-sht1x


sudo apt-get install git

git clone https://github.com/JoBergs/Adafruit_Python_DHT
sudo apt-get install build-essential python3-dev
cd Adafruit_Python_DHT
sudo python3 setup.py install --force-pi

DHT Adafruit
cd /home/pi
sudo git clone https://github.com/adafruit/Adafruit_Python_DHT.git
cd Adafruit_Python_DHT
sudo python3 setup.py install

wiringpi
sudo apt-get install python3-rpi.gpio




---
Waage mit Python3 testen
https://github.com/dcrystalj/hx711py3
--- 
Portierung vom pi-ager nach Python3
https://docs.python.org/3/howto/pyporting.html
http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html#sections
----
Division??
Python 2

print 'Python', python_version()
print '3 / 2 =', 3 / 2
print '3 // 2 =', 3 // 2
print '3 / 2.0 =', 3 / 2.0
print '3 // 2.0 =', 3 // 2.0
Python 2.7.6
3 / 2 = 1
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0
Python 3

print('Python', python_version())
print('3 / 2 =', 3 / 2)
print('3 // 2 =', 3 // 2)
print('3 / 2.0 =', 3 / 2.0)
print('3 // 2.0 =', 3 // 2.0)
Python 3.4.1
3 / 2 = 1.5
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0
----
---

-------------------------------
Diverse Notizen Ole
YZC-133 10Kg Weighing Sensor Load Cell Weight Electronic Scale

Note: The color of the item may vary slightly due to photography and your own computer
Electronic Scale Weighing Sensor 
Rated Load: 10Kg
Rated Output: 1.0 ±0.15mV/V 
Zero Output: ±0.1mV/V
Cree: 0.03%F.S./30min
Input End: Red+, Black-
Output End: Green+, White-
Input Impedance: 1115±10% Ω 
Output Impedance: 1000±10% Ω
Maximum working voltage: 15V DC
Operating temperature range: -20~60°C
Total Size: 80 x 13 x 13mm/3.14 x 0.51 x 0.51""(L X W X H)
Material: Aluminum Alloy
Weight: 30g

Package included:
1 x 10Kg Electronic Scale Weighing Sensor



Nennausgangs: 1,0 +/- 10% mV / V
Nicht-Linearitaet: 0,02% F. S.                  # 2gr
Hysterese: 0,02% F. S.                          # 2gr
Wiederholbarkeit: 0,02% F. S.                   # 2gr
Zero-Balance: +/- 2% F. S.                      # 200gr
Temp-Effekt auf Null: 0,025% F.S./10C           # 2,5gr bei 10° Änderung 0,025/10=0,0025 -> 0,25gr / 1°
Temp-Effekt auf Null Ausgang: 0,025% F.S./10C   # 2,5gr bei 10° Änderung 0,025/10=0,0025 -> 0,25gr / 1°
Schleich (30min): 0,03% F. S.                   # 3gr bei 30min 0,03/30=0,001 -> 0,1gr/min
Eingangsimpedanz: 410 +/- 30 Ohm
Ausgangsimpedanz: 350 Ohm +/- 3
Isolierung: Groesser als 2000 Megohm / 50V DC
Kompensierten Temperaturbereich: -10 Grad Celsius ~ 40 Grad Celsius
Betriebstemperaturbereich: -20 Grad Celsius ~ 60 Grad Celsius
ueberlastschutz : 150% F. S.                    # 15000gr 15KG
Ultimative ueberlastung: 300% F. S.             # 30000gr 30KG
Waegezelle Groesse: 80 x 12,7 x 12,7 mm / 3,1 "x 0,5" x 0,3 "(L * B * T)
Gewindebohrung Durchmesser: 3 mm / 0,11 "
Mitte Lochgroesse: 17 x 10 mm / 0,67 "x 0,4" (L * Max.W)
Kabellaenge: 18 cm / 7 "



Nichtlinearität der Kennlinie bei auf- und absteigender Belastung sowie die Hysterese des Nullpunktes gemacht oder kombiniert und als Summenfehler (zusammengesetzter Fehler) angegeben. 
Abweichungen, die durch Temperaturschwankungen hervorgerufen werden, werden jedoch separat spezifiziert.


F.S bedeutet: Full scale, d.h. Genauigkeitsangabe in Bezug auf die Nennwert. 
Z.B wenn eine Wägezelle für ein Nennlast von 1000kg ausgelegt ist, und die Genauigkeit von 0.05% f.s hat, beträgt die maximale Abweichung dieser Zelle 5 kg.


def
    actual_data = {"actual_temperature": sensor_temperature, "actual_humidity": sensor_humidity, "actual_weight_load_cell_1":weight_load_cell_1, "actual_weight_load_cell_2":weight_load_cell_2}
    return json.dumps(actual_data)
    
setInterval(
  function()
  {
    $.getJSON('/show_actualdata',function(actual_data) {         ##show_actualdata ist die Function in python (Flask)                                         
      $("#actual_weight_load_cell_1").text(actual_data.actual_weight_load_cell_1);
        if( actual_data.actual_weight_load_cell_1 > 300 ) {
           $("#alert").show();
        }
        else {
           $("#alert").hide();
        }
     });     
  },
5000); (alle 5 sec.)



-------------------------------
WLANThermo Bibliotheken
install build-essential sudo 
vim                 # Editor
htop                # Prozess-viewer
iftop               # Überwachen des Netzwerkverkehrs
iotop               # zeigt die aktuellen I/O Transferraten
gnuplot-nox         # kommandozeilengesteuerter Funktionsplotter
lighttpd            # light web server  event-driven architecture
apache2-utils       # Hilfsprogramme für Webserver (u.a. htpasswd )
php5-cgi            # CGI-Version
php5-gd             # Modul für die Handhabung von Grafiken aus PHP-Skripten heraus
php5-intl           # Internationalisierungsmodul für PHP5
php5-curl           # CURL-Bibliothek können Dateien von FTP-, Gopher- und HTTP-Servern kopiert werden.
fswebcam            # Webcam https://www.raspberrypi.org/documentation/usage/webcams/
imagemagick         # Webcam  
pigpio              # GPIO-Steuerung
python              # py2 -> py3
python-dev          # py2 -> py3
python-serial       # py2 -> py3
python-psutil       # py2
python-pyinotify    # py2
python-urllib3      # py2
python3             # Interaktive objektorientierte Hochsprache (Python3-Standardversion)
python3-dev         # Header-Dateien und eine statische Bibliothek für Python (Standard)
python3-serial      # Modul zur Kapselung des Zugriffs auf die serielle Schnittstelle
python3-psutil      ## selber gefunden / Modul mit komfortablen Funktionen für die Prozessverwaltung
python3-pyinotify   ## selber gefunden / Einfache Python-Anbindung an Linux' inotify
python3-urllib3     ## selber gefunden / Python-3-HTTP-Bibliothek mit thread-sicherer Wiederverwendung von Verbindungen
ntpstat             # Zeitsyncronisierung
python-pip          # py2
python3-pip         # alternative Python package installer - Python 3 version of the package
