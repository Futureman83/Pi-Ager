#### = Erledigt
.... = verschoben auf nächstes Release

1) Website
    01 Upload CSV und eintragen als Agingtable_[CSV-Filename] in Datenbank ACHTUNG! richtige Reihenfolge in Tabelle schreiben!
    02 Editieren und Löschen der Agingtables
    03 Wägezellen Calibrate Wizzard (dauerhafte Wertmessung die man sieht, definiertes Gewicht anhängen)
....03 Alarm
    04 Temperatur Statistiken und aktuelle Werte
####05 Reifetabellenzeile einfärben, welche Phase gerade aktiv
    06 php logging nutzen
    07 Translation Aktivieren
....08 Update über Website ermöglichen
....09 Displayupdate über Website
    10 Kommentare entfernen
####11 Datenbank/-schema per Button erzeugen
    12 Datenbank auf Vollständigkeit überprüfen. Warnung ausgeben, wenn Dinge fehlen und ergänzen
    13 Code aufräumen
####14 Logfile (website) erzeugen, wenn nicht vorhanden // über python erledigt
####15 admin.php        unter debug fehlen: measuring_interval_debug, agingtable_days_in_seconds_debug
####16 settings.php     scale-werte fehlen: measuring_interval, measuring_duration, saving_period, samples, spikes
####17 settings.php     Agingtable-Werte fehlen: failure_humidity_delta, failure_temperature_delta
    18 on the fly werte auslesen (phase der reifetabelle, status, temperatur, feuchte, Waage1 und 2, Lichtstatus für Schalter on/off)
    19 Werte prüfen: failure_humidity_delta, failure_temperature_delta, Scale1 & 2 measuring_interval, measuring_duration, saving_period, samples, spikes
    20 Helptexte schreiben
    21 Changelog Bild von Flatmike
    22 scale, language, sensortyp von settings.php auf admin.php umziehen

2) Python
####01 Stromausfall
....02 Display 
....03 4 Temperaturfühler mit AD Wandler (Statistiken und aktuelle Werte)
....04 Alarm
####05 Logrotate für pi-ager-logfile prüfen
    06 Translation aktivieren
####07 Kommentare entfernen
####08 Logeinträge kategorisieren (debug, info, warning, error, critical)
####09 Code aufräumen (nur Funktionen in importierten py's, um doppelte Ausführungen zu vermeiden)
####10 Logfile (website) erzeugen, wenn nicht vorhanden
####11 Logging: Datei- und Consolenaufteilung verbessern
####12 Licht für Webcam automatisch anschalten
####13 pi_ager_init.py: Variablen, deren Werte hardcoded gesetzt werden, sollten in die pi_ager_names.py überführt werden
####14 cleanup bei nicht definierten GPIO's abfangen (gpio == Not Null)
        GPIO.gpio_function(pin) will return a value from: GPIO.IN, GPIO.OUT, GPIO.SPI, GPIO.I2C, GPIO.HARD_PWM, GPIO.SERIAL, GPIO.UNKNOWN
        0 = GPIO.OUT
        1 = GPIO.IN
        40 = GPIO.SERIAL
        41 = GPIO.SPI
        42 = GPIO.I2C
        43 = GPIO.HARD_PWM
        -1 = GPIO.UNKNOWN
    15 database import in logging.py
####16 agingtable korrektur Prüfen der Werte Dictionary Null werte Restart 
####17 Logik/schaltung auf True und False prüfen
####18 GPIO Scales prüfen (names.py und hardcoded in scale.py/scaleloop.py)
####19 cleanup gpio scales?
####20 Data und sync aus Datenbank bei Scale entfernen
####21 Schaltungen von Licht und UV auf Zeiten laut Settings prüfen

3) Linux
    01 phpliteadmin.php passwort bei erstinstallation auf allgemeinses PW oder eigenes setzen